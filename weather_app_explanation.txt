===========================================
WEATHER APP - DETAILED CODE EXPLANATION
===========================================

1. IMPORTED LIBRARIES
-------------------
tkinter (imported as tk):
- Python's standard GUI library
- Used to create all visual elements of the app
- Provides windows, buttons, text fields, etc.

ttk (from tkinter):
- Themed widget set for tkinter
- Provides more modern-looking widgets
- Used for creating styled buttons, labels, frames

messagebox (from tkinter):
- Used to show popup messages
- Types used: showwarning (for input errors), showerror (for API/network errors)

requests:
- Library for making HTTP requests
- Used to fetch weather data from OpenWeatherMap API

2. GLOBAL VARIABLES
------------------
api_key:
- Value: "bc11bf7e559b891384cc94b824bd1eb1"
- Used to authenticate requests to OpenWeatherMap
- Required for accessing weather data

3. CLASS: WeatherApp
-------------------
Purpose: Main application class that organizes all functionality

A. INSTANCE VARIABLES (self.variables)
------------------------------------
self.root:
- The main application window
- Controls window properties (size, title, etc.)

self.main_frame:
- Main container frame
- Holds all other GUI elements
- Has 20px padding around edges

self.city_frame:
- Container for city input elements
- Holds the text input and search button
- Arranged horizontally (left to right)

self.weather_frame:
- Container for weather information
- Holds temperature, description, and details labels
- Arranged vertically (top to bottom)

self.city_entry:
- Text input field
- Where user types city name
- Has placeholder text "Enter city name..."
- Width: 30 characters

self.search_button:
- Button labeled "Search"
- Triggers weather data fetch when clicked
- Positioned right of city input

self.title_label:
- Shows "Weather Forecast"
- Large bold text (Helvetica, 24pt)
- At top of window

self.temp_label:
- Shows temperature
- Very large text (Helvetica, 36pt)
- Example: "23.5°C"

self.desc_label:
- Shows weather description
- Medium text (Helvetica, 14pt)
- Example: "Partly cloudy"

self.details_label:
- Shows additional weather information
- Regular text (Helvetica, 12pt)
- Shows feels like, humidity, wind speed

B. METHODS (Functions)
---------------------
1. __init__(self, root):
   Purpose: Initialize the application
   Parameters:
   - root: The main window object
   Actions:
   - Sets up window properties
   - Creates all GUI elements
   - Configures styles
   - Arranges layout

2. clear_placeholder(self, event):
   Purpose: Handle input field interaction
   Parameters:
   - event: The click event (not used but required)
   Actions:
   - Checks if input field contains placeholder
   - Clears field if it does
   When called: When user clicks the input field

3. get_weather(self):
   Purpose: Fetch and display weather data
   Parameters: None
   Actions:
   a) Input Handling:
      - Gets city name from input field
      - Validates input isn't empty
   
   b) API Request:
      - Constructs URL with:
        * Base URL: api.openweathermap.org
        * City name from input
        * API key
        * Units: metric (for Celsius)
      - Sends GET request to API
   
   c) Data Processing:
      - Parses JSON response
      - Extracts weather information:
        * Temperature
        * Weather description
        * Feels like temperature
        * Humidity
        * Wind speed
   
   d) Display Update:
      - Updates temperature label
      - Updates description label
      - Updates details label
   
   e) Error Handling:
      - Checks for empty input
      - Handles network errors
      - Handles API errors
      - Shows appropriate error messages
   When called: When search button is clicked

4. VISUAL STYLES
---------------
Background Color: #f0f0f0 (light gray)

Font Styles:
- Title: Helvetica 24pt bold
- Temperature: Helvetica 36pt
- Description: Helvetica 14pt
- Details: Helvetica 12pt
- Input/Button: Helvetica 12pt

Layout Spacing:
- Main frame padding: 20px
- Vertical spacing between elements: 20px
- Horizontal spacing between input and button: 5px

5. DATA FLOW
------------
1. User Input:
   city_entry → get_weather()

2. API Request:
   get_weather() → OpenWeatherMap API

3. Response Processing:
   API Response → Python dictionary → GUI labels

4. Display Update:
   Weather data → temp_label, desc_label, details_label

6. ERROR HANDLING
----------------
1. Input Validation:
   - Empty input → Warning message
   - "Enter city name..." → Warning message

2. Network Errors:
   - Connection issues → Error popup
   - Timeout → Error popup

3. API Errors:
   - Invalid city → Error popup
   - API key issues → Error popup
   - Other API errors → Error popup

7. PROGRAM EXECUTION
-------------------
1. Program starts:
   - Creates main window (root)
   - Creates WeatherApp instance
   - Starts event loop

2. User Interaction:
   - User enters city
   - Clicks search
   - Views results/errors

3. Program End:
   - User closes window
   - Event loop ends
   - Program terminates

===========================================
Note: This app uses the OpenWeatherMap API's
free tier service, which provides:
- Current weather data
- Temperature in Celsius
- Basic weather descriptions
- Wind and humidity data
=========================================== 